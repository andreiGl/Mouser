<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/out/MANIFEST.MAC.MF">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/out/MANIFEST.MAC.MF" />
              <option name="updatedContent" value="Manifest-Version: 1.0&#10;Main-Class: MouserMac&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/out/MANIFEST.MF">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/out/MANIFEST.MF" />
              <option name="updatedContent" value="Manifest-Version: 1.0&#10;Main-Class: Mouser&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/out/MANIFEST.WIN.MF">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/out/MANIFEST.WIN.MF" />
              <option name="updatedContent" value="Manifest-Version: 1.0&#10;Main-Class: MouserWin&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/Mouser.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/Mouser.java" />
              <option name="originalContent" value="import java.awt.*;&#10;import java.time.LocalTime;&#10;import java.time.format.DateTimeParseException;&#10;import java.util.Random;&#10;&#10;public class Mouser {&#10;&#10;    private static LocalTime getStopTime(String stop) {&#10;        System.out.println(&quot;Setting stopTime to &quot; + stop);&#10;        LocalTime stopTime;&#10;        try {&#10;            stopTime = LocalTime.parse(stop);&#10;        } catch (DateTimeParseException ex) {&#10;            System.out.println(&quot;Invalid stopTime argument! \nTime format error: &quot; + ex.getLocalizedMessage());&#10;            return null;&#10;        }&#10;        System.out.println(&quot;StopTime: &quot; + stopTime.toString());&#10;        return stopTime;&#10;    }&#10;&#10;    public static void process(String stop) throws AWTException {&#10;        LocalTime stopTime = stop != null ? getStopTime(stop) : null;&#10;&#10;        Robot r = new Robot();&#10;        Random rand = new Random();&#10;        PointerInfo pInfo;&#10;        int direction = 1;&#10;        while (true) {&#10;            if (stopTime != null &amp;&amp; isStopTimeNow(stopTime)) {&#10;                return;&#10;            }&#10;            r.delay(1000 * rand.nextInt(20) + 50);&#10;            do {&#10;                pInfo = MouseInfo.getPointerInfo();&#10;                if (pInfo == null) {&#10;                    r.delay(1000 * 2);&#10;                }&#10;            } while (pInfo == null);&#10;&#10;            Point p = pInfo.getLocation();&#10;            int x = (int) p.getX();&#10;            int y = (int) p.getY();&#10;            r.mouseMove(x + direction, y);&#10;            direction *= -1;&#10;        }&#10;    }&#10;&#10;    private static boolean isStopTimeNow(LocalTime stopTime) {&#10;        LocalTime now = LocalTime.now();&#10;        if (now.isAfter(stopTime)) {&#10;            System.out.println(&quot;StopTime reached, current time: &quot; + now);&#10;            return true;&#10;        }&#10;        return false;&#10;    }&#10;&#10;    public static void main(String[] args) throws Exception {&#10;        if (args == null || args.length &lt; 1) {&#10;            System.out.println(&quot;Optional stopTime could be set in 24h time format, like: 14:28&quot;);&#10;            Mouser.process(null);&#10;        } else {&#10;            Mouser.process(args[0]);&#10;        }&#10;    }&#10;&#10;&#10;&#10;}" />
              <option name="updatedContent" value="import java.awt.*;&#10;import java.time.LocalTime;&#10;import java.time.format.DateTimeParseException;&#10;import java.util.Random;&#10;&#10;public class Mouser {&#10;&#10;    private static LocalTime getStopTime(String stop) {&#10;        System.out.println(&quot;Setting stopTime to &quot; + stop);&#10;        LocalTime stopTime;&#10;        try {&#10;            stopTime = LocalTime.parse(stop);&#10;        } catch (DateTimeParseException ex) {&#10;            System.out.println(&quot;Invalid stopTime argument! \nTime format error: &quot; + ex.getLocalizedMessage());&#10;            return null;&#10;        }&#10;        System.out.println(&quot;StopTime: &quot; + stopTime.toString());&#10;        return stopTime;&#10;    }&#10;&#10;    public static void process(String stop) throws AWTException {&#10;        LocalTime stopTime = stop != null ? getStopTime(stop) : null;&#10;&#10;        // Start caffeinate process to prevent sleep/screen timeout on macOS&#10;        Process caffeinateProcess = null;&#10;        try {&#10;            caffeinateProcess = new ProcessBuilder(&quot;caffeinate&quot;, &quot;-dimsu&quot;).start();&#10;            System.out.println(&quot;Started caffeinate process to prevent sleep.&quot;);&#10;        } catch (Exception e) {&#10;            System.out.println(&quot;Failed to start caffeinate: &quot; + e.getMessage());&#10;        }&#10;&#10;        Robot r = new Robot();&#10;        Random rand = new Random();&#10;        PointerInfo pInfo;&#10;        int direction = 1;&#10;        try {&#10;            while (true) {&#10;                if (stopTime != null &amp;&amp; isStopTimeNow(stopTime)) {&#10;                    break;&#10;                }&#10;                r.delay(1000 * rand.nextInt(20) + 50);&#10;                do {&#10;                    pInfo = MouseInfo.getPointerInfo();&#10;                    if (pInfo == null) {&#10;                        r.delay(1000 * 2);&#10;                    }&#10;                } while (pInfo == null);&#10;&#10;                Point p = pInfo.getLocation();&#10;                int x = (int) p.getX();&#10;                int y = (int) p.getY();&#10;                r.mouseMove(x + direction, y);&#10;                direction *= -1;&#10;            }&#10;        } finally {&#10;            // Stop caffeinate process when done&#10;            if (caffeinateProcess != null) {&#10;                caffeinateProcess.destroy();&#10;                System.out.println(&quot;Stopped caffeinate process.&quot;);&#10;            }&#10;        }&#10;    }&#10;&#10;    private static boolean isStopTimeNow(LocalTime stopTime) {&#10;        LocalTime now = LocalTime.now();&#10;        if (now.isAfter(stopTime)) {&#10;            System.out.println(&quot;StopTime reached, current time: &quot; + now);&#10;            return true;&#10;        }&#10;        return false;&#10;    }&#10;&#10;    public static void main(String[] args) throws Exception {&#10;        if (args == null || args.length &lt; 1) {&#10;            System.out.println(&quot;Optional stopTime could be set in 24h time format, like: 14:28&quot;);&#10;            Mouser.process(null);&#10;        } else {&#10;            Mouser.process(args[0]);&#10;        }&#10;    }&#10;&#10;&#10;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/MouserMac.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/MouserMac.java" />
              <option name="updatedContent" value="import java.awt.*;&#10;import java.time.LocalTime;&#10;import java.time.format.DateTimeParseException;&#10;import java.util.Random;&#10;&#10;public class MouserMac {&#10;    private static LocalTime getStopTime(String stop) {&#10;        // ...existing code...&#10;        LocalTime stopTime;&#10;        try {&#10;            stopTime = LocalTime.parse(stop);&#10;        } catch (DateTimeParseException ex) {&#10;            System.out.println(&quot;Invalid stopTime argument! \nTime format error: &quot; + ex.getLocalizedMessage());&#10;            return null;&#10;        }&#10;        System.out.println(&quot;StopTime: &quot; + stopTime.toString());&#10;        return stopTime;&#10;    }&#10;&#10;    public static void process(String stop) throws AWTException {&#10;        LocalTime stopTime = stop != null ? getStopTime(stop) : null;&#10;        Process caffeinateProcess = null;&#10;        try {&#10;            caffeinateProcess = new ProcessBuilder(&quot;caffeinate&quot;, &quot;-dimsu&quot;).start();&#10;            System.out.println(&quot;Started caffeinate process to prevent sleep.&quot;);&#10;        } catch (Exception e) {&#10;            System.out.println(&quot;Failed to start caffeinate: &quot; + e.getMessage());&#10;        }&#10;        Robot r = new Robot();&#10;        Random rand = new Random();&#10;        PointerInfo pInfo;&#10;        int direction = 1;&#10;        try {&#10;            while (true) {&#10;                if (stopTime != null &amp;&amp; isStopTimeNow(stopTime)) {&#10;                    break;&#10;                }&#10;                r.delay(1000 * rand.nextInt(20) + 50);&#10;                do {&#10;                    pInfo = MouseInfo.getPointerInfo();&#10;                    if (pInfo == null) {&#10;                        r.delay(1000 * 2);&#10;                    }&#10;                } while (pInfo == null);&#10;                Point p = pInfo.getLocation();&#10;                int x = (int) p.getX();&#10;                int y = (int) p.getY();&#10;                r.mouseMove(x + direction, y);&#10;                direction *= -1;&#10;            }&#10;        } finally {&#10;            if (caffeinateProcess != null) {&#10;                caffeinateProcess.destroy();&#10;                System.out.println(&quot;Stopped caffeinate process.&quot;);&#10;            }&#10;        }&#10;    }&#10;&#10;    private static boolean isStopTimeNow(LocalTime stopTime) {&#10;        LocalTime now = LocalTime.now();&#10;        if (now.isAfter(stopTime)) {&#10;            System.out.println(&quot;StopTime reached, current time: &quot; + now);&#10;            return true;&#10;        }&#10;        return false;&#10;    }&#10;&#10;    public static void main(String[] args) throws Exception {&#10;        if (args == null || args.length &lt; 1) {&#10;            System.out.println(&quot;Optional stopTime could be set in 24h time format, like: 14:28&quot;);&#10;            MouserMac.process(null);&#10;        } else {&#10;            MouserMac.process(args[0]);&#10;        }&#10;    }&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/MouserWin.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/MouserWin.java" />
              <option name="updatedContent" value="import java.awt.*;&#10;import java.time.LocalTime;&#10;import java.time.format.DateTimeParseException;&#10;import java.util.Random;&#10;&#10;public class MouserWin {&#10;    private static LocalTime getStopTime(String stop) {&#10;        // ...existing code...&#10;        LocalTime stopTime;&#10;        try {&#10;            stopTime = LocalTime.parse(stop);&#10;        } catch (DateTimeParseException ex) {&#10;            System.out.println(&quot;Invalid stopTime argument! \nTime format error: &quot; + ex.getLocalizedMessage());&#10;            return null;&#10;        }&#10;        System.out.println(&quot;StopTime: &quot; + stopTime.toString());&#10;        return stopTime;&#10;    }&#10;&#10;    public static void process(String stop) throws AWTException {&#10;        LocalTime stopTime = stop != null ? getStopTime(stop) : null;&#10;        Robot r = new Robot();&#10;        Random rand = new Random();&#10;        PointerInfo pInfo;&#10;        int direction = 1;&#10;        while (true) {&#10;            if (stopTime != null &amp;&amp; isStopTimeNow(stopTime)) {&#10;                break;&#10;            }&#10;            r.delay(1000 * rand.nextInt(20) + 50);&#10;            do {&#10;                pInfo = MouseInfo.getPointerInfo();&#10;                if (pInfo == null) {&#10;                    r.delay(1000 * 2);&#10;                }&#10;            } while (pInfo == null);&#10;            Point p = pInfo.getLocation();&#10;            int x = (int) p.getX();&#10;            int y = (int) p.getY();&#10;            r.mouseMove(x + direction, y);&#10;            direction *= -1;&#10;        }&#10;    }&#10;&#10;    private static boolean isStopTimeNow(LocalTime stopTime) {&#10;        LocalTime now = LocalTime.now();&#10;        if (now.isAfter(stopTime)) {&#10;            System.out.println(&quot;StopTime reached, current time: &quot; + now);&#10;            return true;&#10;        }&#10;        return false;&#10;    }&#10;&#10;    public static void main(String[] args) throws Exception {&#10;        if (args == null || args.length &lt; 1) {&#10;            System.out.println(&quot;Optional stopTime could be set in 24h time format, like: 14:28&quot;);&#10;            MouserWin.process(null);&#10;        } else {&#10;            MouserWin.process(args[0]);&#10;        }&#10;    }&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>